{"version":3,"sources":["../../../../src/js/Layout/Player/index.jsx"],"names":["b64Encoder","document","body","onkeydown","event","keyCode","player","togglePlay","music","next","prev","mounted","timer","Player","React","Component","constructor","props","state","trackMeta","trackName","trackArtist","trackArtwork","isPlaying","repeat","shuffle","volume","CurrentPos","TrackDuration","toggleIsPlaying","bind","componentDidMount","loadFile","componentDidCatch","error","info","Console","log","console","volumeChange","e","target","value","setState","_","Howler","newTrack","pauseMusic","playMusic","play","pause","toggleRepeat","toggleShuffle","seekTrack","percentage","clientX","querySelector","offsetWidth","seek","Howl","src","fileName","once","duration","setInterval","updateCurrentPos","clearSong","clearInterval","render","meta","trackMetaData","artwork","picture","b64Image","format","encode","data","title","artist"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\nimport React from \"react\"\nimport TrackInfo from \"./TrackInfo\"\nimport PlayerController from \"./PlayerController\"\nimport SecondaryController from \"./SecondaryController\"\nimport ProgressBar from \"./ProgressBar\"\nimport * as b64Encoder from \"base64-arraybuffer\"\nimport {Howl, Howler} from 'howler';\n//let mediakeys = require('mediakeys').listen();\n\n// toggle playing state\n// media keys\n// mediakeys.on('play', () => {\n//     player.togglePlay()\n// })\n\n// mediakeys.on('next', () => {\n// })\n// mediakeys.on('back', () => {\n\n// })\n\n// space bar\ndocument.body.onkeydown = event => {\n  if(event.keyCode === 32){ // spacebar\n    player.togglePlay()\n  }\n}\n\n\n\n\nlet music \nlet player = {\n  // run fn reference to toggle play/pause state\n  togglePlay: null, \n  next: null,\n  prev: null\n}\nlet mounted = false\nlet timer\n\nexport default class Player extends React.Component{\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      trackMeta: {\n        trackName: \"Title\",\n        trackArtist: \"Artist\",\n        trackArtwork: \"\",\n      },\n      isPlaying: true,\n      repeat: 0,\n      shuffle: false,\n      volume: 80,\n      CurrentPos: 0,\n      TrackDuration: null\n    }\n    // map player to external control (media keys)\n    player.togglePlay = this.toggleIsPlaying.bind(this)\n  }\n\n  componentDidMount(){\n    mounted = true\n    this.loadFile()\n  }\n\n  componentDidCatch(error, info) {\n    Console.log(\"Error in Player Component: \")\n    console.log(info)\n    Console.error(error)\n  }\n\n  volumeChange(e){\n    let volume = e.target.value\n    if (volume !== this.state.volume){\n      this.setState(_ => ({\n        volume\n      }), _=>{\n        Howler.volume(this.state.volume / 100)\n      })      \n    }\n  }\n\n  toggleIsPlaying() {\n    this.setState(state => ({\n      isPlaying: !state.isPlaying\n    }),()=>{\n      this.props.newTrack()\n      if(this.state.isPlaying === true) this.pauseMusic()\n      else this.playMusic()\n    })\n  }\n\n  playMusic(){\n    // increase virtual volume to smoothen resumed play\n    while(Howler.volume < this.state.volume){\n      Howler.volume(Howler.volume + 0.01)\n    }\n    music.play()\n  }\n\n  pauseMusic(){\n    // decrease virtual volume to smoothen pause\n    while(Howler.volume > 0){\n      Howler.volume(Howler.volume - 0.01)\n    }\n    music.pause()\n  }\n\n  toggleRepeat(){\n    this.setState(state => ({\n      repeat: state.repeat === 0 ? 2 : state.repeat - 1 \n    }))\n  }\n\n  toggleShuffle() {\n    this.setState(state => ({\n      shuffle: !state.shuffle\n    }))\n  }\n\n  seekTrack(e){\n    let percentage = (e.clientX / document.querySelector(\".ProgressBar\").offsetWidth) \n    music.seek(percentage * this.state.TrackDuration)\n    // speeds up seek update\n    this.setState(_ => ({\n      CurrentPos: percentage * this.state.TrackDuration\n    }))\n  }\n\n  loadFile(){\n    \n    music = new Howl({\n      src: this.props.fileName\n    })\n\n    music.once(\"load\", ()=>{\n      this.setState({\n        TrackDuration: music.duration()\n      },_=>{\n        timer = setInterval(()=> {this.updateCurrentPos()/*.bind(this)*/}, 500)\n      })\n    })\n    music.once(\"end\", ()=>{\n      this.clearSong.bind(this)\n    })\n  }\n\n  async updateCurrentPos(){\n    if(mounted){\n      await this.setState( _ => ({\n        CurrentPos: 0 + music.seek()\n      }))\n    }\n  }\n\n  clearSong(){\n    clearInterval(timer)\n  }\n\n  render(){\n    let meta = this.props.trackMetaData\n    let artwork = meta.picture[0]\n    let b64Image = `data:${artwork.format};base64,` + b64Encoder.encode(artwork.data)\n    return (\n      <div className=\"player\">\n        <ProgressBar\n          TrackDuration={this.state.TrackDuration}\n          CurrentPos={this.state.CurrentPos}\n          seekTrack={this.seekTrack.bind(this)}\n        />\n        <TrackInfo \n          trackName={meta.title} //{this.state.trackMeta.trackName}\n          trackArtist={meta.artist} //{this.state.trackMeta.trackArtist}\n          trackArtwork={b64Image}//{this.state.trackMeta.trackArtwork}\n        />\n        <PlayerController \n          isPlaying={this.state.isPlaying} \n          repeat={this.state.repeat} \n          shuffle={this.state.shuffle} \n          toggleIsPlaying={this.toggleIsPlaying.bind(this)}\n          toggleRepeat={this.toggleRepeat.bind(this)}\n          toggleShuffle={this.toggleShuffle.bind(this)}\n        />\n        <SecondaryController\n          volume={this.state.volume} \n          volumeChange={this.volumeChange.bind(this)}\n        />\n      </div>\n    )\n  }\n}"]}